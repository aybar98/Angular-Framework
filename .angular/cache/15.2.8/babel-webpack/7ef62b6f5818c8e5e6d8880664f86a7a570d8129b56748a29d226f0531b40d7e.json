{"ast":null,"code":"import { finalize } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./app-state.service\";\nimport * as i2 from \"./loading.service\";\nexport class AppHttpInterceptor {\n  constructor(appState, loadingService) {\n    this.appState = appState;\n    this.loadingService = loadingService;\n  }\n  intercept(request, next) {\n    /*\r\n    this.appState.setProductState({\r\n      status :\"LOADING\"\r\n    })*/\n    this.loadingService.showLoadingSpinner();\n    const token = this.appState.authState.token;\n    let req = request.clone({\n      headers: request.headers.set(\"Authorization\", `Bearer ${token}`)\n    });\n    return next.handle(req).pipe(finalize(() => {\n      //this.appState.setProductState({\n      //status :\"\"\n      //})\n      this.loadingService.hideLoadingSpinner();\n    }));\n  }\n}\nAppHttpInterceptor.ɵfac = function AppHttpInterceptor_Factory(t) {\n  return new (t || AppHttpInterceptor)(i0.ɵɵinject(i1.AppStateService), i0.ɵɵinject(i2.LoadingService));\n};\nAppHttpInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AppHttpInterceptor,\n  factory: AppHttpInterceptor.ɵfac\n});","map":{"version":3,"mappings":"AAOA,SAAoBA,QAAQ,QAAmB,MAAM;;;;AAKrD,OAAM,MAAOC,kBAAkB;EAE7BC,YAAoBC,QAA0B,EAC1BC,cAA6B;IAD7B,aAAQ,GAARD,QAAQ;IACR,mBAAc,GAAdC,cAAc;EAAkB;EAEpDC,SAAS,CAACC,OAA6B,EAAEC,IAAiB;IACxD;;;;IAIA,IAAI,CAACH,cAAc,CAACI,kBAAkB,EAAE;IACxC,MAAMC,KAAK,GAAG,IAAI,CAACN,QAAQ,CAACO,SAAS,CAACD,KAAK;IAC3C,IAAIE,GAAG,GAAGL,OAAO,CAACM,KAAK,CAAC;MACtBC,OAAO,EAAGP,OAAO,CAACO,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE,UAAUL,KAAK,EAAE;KACjE,CAAC;IACF,OAAOF,IAAI,CAACQ,MAAM,CAACJ,GAAG,CAAC,CAACK,IAAI,CAC1BhB,QAAQ,CAAC,MAAI;MACX;MACE;MACF;MACA,IAAI,CAACI,cAAc,CAACa,kBAAkB,EAAE;IAC1C,CAAC,CAAC,CACH;EACH;;AAvBWhB,kBAAkB;mBAAlBA,kBAAkB;AAAA;AAAlBA,kBAAkB;SAAlBA,kBAAkB;EAAAiB,SAAlBjB,kBAAkB;AAAA","names":["finalize","AppHttpInterceptor","constructor","appState","loadingService","intercept","request","next","showLoadingSpinner","token","authState","req","clone","headers","set","handle","pipe","hideLoadingSpinner","factory"],"sourceRoot":"","sources":["C:\\Users\\ayman\\Desktop\\New folder (10)\\JEE_Activity_five\\src\\app\\services\\app-http.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpRequest,\r\n  HttpHandler,\r\n  HttpEvent,\r\n  HttpInterceptor\r\n} from '@angular/common/http';\r\nimport {catchError, finalize, Observable} from 'rxjs';\r\nimport {AppStateService} from \"./app-state.service\";\r\nimport {LoadingService} from \"./loading.service\";\r\n\r\n@Injectable()\r\nexport class AppHttpInterceptor implements HttpInterceptor {\r\n\r\n  constructor(private appState : AppStateService,\r\n              private loadingService:LoadingService) {}\r\n\r\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\r\n    /*\r\n    this.appState.setProductState({\r\n      status :\"LOADING\"\r\n    })*/\r\n    this.loadingService.showLoadingSpinner();\r\n    const token = this.appState.authState.token;\r\n    let req = request.clone({\r\n      headers : request.headers.set(\"Authorization\", `Bearer ${token}`)\r\n    });\r\n    return next.handle(req).pipe(\r\n      finalize(()=>{\r\n        //this.appState.setProductState({\r\n          //status :\"\"\r\n        //})\r\n        this.loadingService.hideLoadingSpinner();\r\n      })\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}